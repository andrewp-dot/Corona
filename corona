#!/bin/bash

env POSIXLY_CORRECT=1 | echo -n 

declare -a csv_files=("")
declare -a bz2_files=("")
declare -a gz_files=("")


usage() {
  echo corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]] 
  echo
  echo [COMMAND] 
  echo
  echo -e '\t' "infected — spočítá počet nakažených."
  echo -e '\t' "merge — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)."
  echo -e '\t' "gender — vypíše počet nakažených pro jednotlivá pohlaví."
  echo -e '\t' "age — vypíše statistiku počtu nakažených osob dle věku."
  echo -e '\t' "daily — vypíše statistiku nakažených osob pro jednotlivé dny."
  echo -e '\t' "monthly — vypíše statistiku nakažených osob pro jednotlivé měsíce. "
  echo -e '\t' "yearly — vypíše statistiku nakažených osob pro jednotlivé roky."
  echo -e '\t' "countries — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR)."
  echo -e '\t' "districts — vypíše statistiku nakažených osob pro jednotlivé okresy."
  echo -e '\t' "regions — vypíše statistiku nakažených osob pro jednotlivé kraje."
  echo
  
  echo [FILTERS] 
  echo
  echo -e '\t' "-a DATETIME — after: jsou uvažovány pouze záznamy po tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD."
  echo -e '\t' "-b DATETIME — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
  echo -e '\t' "-g GENDER — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)."
  echo -e '\t' "-s [WIDTH] u příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů. Parametr WIDTH nastavuje šířku histogramů."
  echo
  echo -h — "vypíše nápovědu s krátkým popisem každého příkazu a přepínače."
  echo 

  echo EXIT STATUS 
  echo -e '\t' "0 - Success"
  echo -e '\t' "1 - Chyba v načítání argumentu."

  exit 1; 
}

normal_year_pattern='^[[:space:]]*[0-9][0-9][0-9][0-9](-)((((0[13578]|1[02])(-)31))|((0[13456789]|1[012])(-)(30|29))|((0[1-9]|1[0-2])(-)(0[1-9]|1[0-9]|2[0-8])))[[:space:]]*$'
leap_year_pattern='^[[:space:]]*[0-9][0-9]([02468][048]|[13579][26])(-)((((0[13578]|1[02])(-)31))|((0[13456789]|1[012])(-)(30))|((0[1-9]|1[0-2])(-)(0[1-9]|1[0-9]|2[0-9])))[[:space:]]*$'

#overenia na format prepinacov
verify_date() {
    if [[ $1 =~ $normal_year_pattern ]] || [[ $OPTARG =~ $leap_year_pattern ]] #yyyy-mm-dd - basic verification - to ADD: limity, priestupne roky / kvôli februáru, validácia poctu dni
    then 
        date_is_valid="true"
    else
      echo "Invalid date: $1"
      date_is_valid="false"
      usage
    fi
}

age_regex='^[0-9]*$'
verify_age(){
  if ! [[ $1 =~ $age_regex ]]
  then 
    echo Invalid age: $1 ; usage
  fi
}

data=""

check_valid_data() {
   for csv in "${csv_files[@]}";do
    if [[ "$csv" != "" ]]; then
      awk -F, -v norm_date="$normal_year_pattern" -v leap_date="$leap_year_pattern" -v age=$age_regex 'NR == 1{next;}\
      $2 !~ norm_date && $2 !~ leap_date && $2 != ""  {printf("Invalid date: %s\n",$0) } \
      $3 !~ age && $3 != "" {printf("Invalid age: %s\n", $0) }' $csv
    fi
  done

  for bzf in "${bz2_files[@]}"; do
    if [[ "$bzf" != "" ]]; then
        bzcat -q $bzf | awk -F, -v norm_date="$normal_year_pattern" -v leap_date="$leap_year_pattern" -v age=$age_regex 'NR == 1{next;}\
      $2 !~ norm_date && $2 !~ leap_date && $2 != ""  {printf("Invalid date: %s\n",$0) } \
      $3 !~ age && $3 != "" {printf("Invalid age: %s\n", $0)}' 
    fi
  done

  for gzf in  "${gz_files[@]}"; do
    if [[ "$gzf" != "" ]]; then
      gzip -dcq $gzf | awk -F, -v norm_date="$normal_year_pattern" -v leap_date="$leap_year_pattern" -v age=$age_regex 'NR == 1{next;}\
      $2 !~ norm_date && $2 !~ leap_date && $2 != ""  {printf("Invalid date: %s\n",$0)}\
      $3 !~ age && $3 != "" {printf("Invalid age: %s\n", $0)}' 
    fi
  done
}

#premenne pre histogram
histogram="false" # ci bol zadany prepinac
histogram_width=""
histogram_commands='^(gender|age|daily|monthly|yearly|countries|districts|regions)$'
max_value=1

check_histogram_width() {
  histogram="true"

  if [[ $1 =~ ^[1-9][0-9]*$ ]] 
  then 
  histogram_width=$1
  else
    if [[ $1 =~ $optstring_commands ]]
    then
      ((OPTIND--))  #option index - 1 preto, aby sme nepreskocili prikaz, ak by bol za prepinacom -s rovno prikaz
      histogram_width=1
      case $1 in 
      gender)  max_value=100000 ;; 
      age)  max_value=10000;; 
      daily)  max_value=500 ;; 
      monthly)  max_value=10000;; 
      yearly)  max_value=100000;; 
      countries)  max_value=100 ;;
      districts) max_value=1000 ;;
      regions)   max_value=10000;;
      esac 
    fi
  fi
}

#inicializacia filtrov
after_date="" 
before_date="" 
gender=""

# filtre a prikazy
optstring_filters=":a:b:g:s:h"
optstring_commands='^(infected|merge|gender|age|daily|monthly|yearly|countries|districts|regions)$'
head_regex='(id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs)'
header='id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs'
new_line_regex='^([[:space:]]*|\r\n|\r|\n)$'

while getopts "${optstring_filters}" options; 
do 
  case "${options}" in
    a) verify_date $OPTARG; 
    if [[ "$date_is_valid" = "true" ]]
    then after_date="$OPTARG"
    fi
    ;;
    b) verify_date $OPTARG; 
    if [[ "$date_is_valid" = "true" ]]
    then before_date="$OPTARG"
    fi
    ;;
    g) gender=$OPTARG
    ;;
    s) check_histogram_width $OPTARG ;
    ;;
    h) usage
    ;;
    :) if [[ $OPTARG != "s" ]]; then
            echo "Expected argument."
            usage
        else 
          echo "Command expected."
          usage
       fi
    ;;
    ?) echo Invalid option ; usage
    ;;
  esac
done

#ziskanie stringu - ocakaveho prikazu a overenie, ci to je prikaz
eval command=\$${OPTIND} #ziskanie nasledujuceho argumentu, ktory by mal byt command

if ! [[ $command =~ $optstring_commands ]] 
then 
    command=""  
fi

inv_data=""

#nacitanie zo standartneho vstupu
read_from_stdin() { 
  local previous_data=""
  while read -r line
        do
          cmd_out='$0 !~ new_line && $0 !~ head '
          if [[ "$gender" != "" ]]; then
            cmd_out+=' && $4 == gend'
          fi
          if [[ "$after_date" != "" ]]; then
            cmd_out+=' && after <= $2'
          fi 
          if [[ "$before_date" != "" ]]; then
            cmd_out+=' && $2 <= before'
          fi

          if [[ "$data" != "$previous_data" ]] && [[ "$data" != "" ]]; then
               data+=$'\n'
          fi
          previous_data+="$data"

          data+=$(echo "$line" | awk -F, -v head="$head_regex" -v new_line="$new_line_regex" -v norm_date="$normal_year_pattern" -v leap_date="$leap_year_pattern" -v age=$age_regex\
          '$0 !~ head && $0 !~ new_line && $2 !~ norm_date && $2 !~ leap_date && $2 != ""  {printf("Invalid date: %s\n",$0)}\
          $0 !~ head && $0 !~ new_line && $3 !~ age && $3 != "" {printf("Invalid age: %s\n", $0)}' | awk -F, -v head="$head_regex" -v new_line="$new_line_regex" '$0 !~ new_line && $0 !~ head {print $0}')

          echo "$line" |  awk -F, -v new_line="$new_line_regex" -v head="$head_regex" -v before="$before_date" -v after="$after_date" -v gend="$gender" "$cmd_out"        
  done
  echo "$data"
}

#COMMANDS

infected() { 
number_infected=0
(( number_infected+=$( wc -l ) )) 
  echo $number_infected 
}

merge() { 
  if [[ $input_type == "stdin" ]] ; then
    read_from_stdin
  fi

  #cmd_var=' -F, -v new_line="$new_line_regex" -v head="$head_regex" '
  cmd_out='$0 !~ new_line && $0 !~ head '

  if [[ "$gender" != "" ]]; then
    cmd_out+=' && $4 == gend'
  fi
  if [[ "$after_date" != "" ]]; then
    cmd_out+=' && after <= $2'
  fi 
  if [[ "$before_date" != "" ]]; then
    cmd_out+=' && $2 <= before'
  fi 

  #csv
  for csv in "${csv_files[@]}";do
    if [[ "$csv" != "" ]]; then
      awk -F, -v new_line="$new_line_regex" -v head="$head_regex" -v before="$before_date" -v after="$after_date" -v gend="$gender" "$cmd_out" $csv
    fi
  done
  
  #bz
  for bzf in "${bz2_files[@]}"; do
   if [[ "$bzf" != "" ]]; then
      bzcat -q $bzf | awk -F, -v new_line="$new_line_regex" -v head="$head_regex" -v before="$before_date" -v after="$after_date" -v gend="$gender" "$cmd_out" 
    fi
  done
  
  #gzf
  for gzf in  "${gz_files[@]}"; do
   if [[ "$gzf" != "" ]]; then
      gzip -dcq $gzf |  awk -F, -v new_line="$new_line_regex" -v head="$head_regex" -v before="$before_date" -v after="$after_date" -v gend="$gender" "$cmd_out" 
      fi
  done

}

gender() { 
  men=0
  women=0
  if [[ "$input_type" == "stdin" ]]; then
      while read -r line 
      do 
        ((men+=$( echo "$line" | awk -F, '$4== "M" '| wc -l ) ))
        (( women+=$( echo "$line" | awk -F,  '$4== "Z" ' | wc -l ) ))
      done
    fi

    for csv in "${csv_files[@]}";do
        if [[ "$csv" != "" ]]; then
          (( men+=$( awk -F,  '$4== "M"' $csv | wc -l) ))
          (( women+=$( awk -F,  '$4== "Z"' $csv| wc -l) ))
        fi
      done

      for bzf in "${bz2_files[@]}"; do
        if [[ "$bzf" != "" ]]; then
          (( men+=$( bzcat -q  $bzf |  awk -F,  '$4== "M"'  | wc -l) ))
          (( women+=$( bzcat -q $bzf | awk -F,  '$4== "Z"' | wc -l) ))
        fi
      done

      for gzf in "${gz_files[@]}"; do
        if [[ "$gzf" != "" ]]; then
          (( men+=$( gzip -dcq $gzf |  awk -F,  '$4== "M"' | wc -l) ))
          (( women+=$( gzip -dcq $gzf | awk -F,  '$4== "Z"' | wc -l) ))
        fi
      done  

  if [[ "$histogram" == "true" ]]; then
      index=0;
      if (( $men > $women )); then
        max_value=$men
      elif (( $men < $women )); then
        max_value=$women
      else 
        max_value=1 #default case
      fi

    case "$gender" in 
      M) echo -n M: ; 
        while (($index < $histogram_width * $men /$max_value ))
        do
          echo -n "#"
          (( index++ ))
        done
        echo; index=0;
        ;;

      Z) echo -n Z: ; 
        while (($index < $histogram_width * $women /$max_value ))
        do
          echo -n "#"
          (( index++ ))
        done
        echo;  index=0;
        ;;

      "") echo -n M: #men 
          while (($index < $histogram_width * $men /$max_value  ))
          do
            echo -n "#"
            (( index++ ))
          done
          echo;  index=0;

          
          echo -n Z: #women
          while (($index < $histogram_width * $women /$max_value  ))
          do
            echo -n "#"
            (( index++ ))
          done
          echo; index=0 ;;  
    esac
  else
    case "$gender" in 
      M) echo M: $men ;;
      Z) echo Z: $women ;;
      "")  echo M: $men ; echo Z: $women ;;
    esac
  fi
}

age() { 
  awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
  'BEGIN{\
    interval_begin=6; interval_end=15;
  }\
  0 <= $3 && $3 <= 5 {count[0]++ } \
  6 <= $3 && $3 <= 15 {count[1]++ } \
  16 <= $3 && $3 <= 25 {count[2]++ }\
  26 <= $3 && $3 <= 35 {count[3]++ }\
  36 <= $3 && $3 <= 45 {count[4]++ }\
  46 <= $3 && $3 <= 55 {count[5]++ }\
  56 <= $3 && $3 <= 65 {count[6]++ }\
  66 <= $3 && $3 <= 75 {count[7]++ }\
  76 <= $3 && $3 <= 85 {count[8]++ }\
  86 <= $3 && $3 <= 95 {count[9]++ }\
  96 <= $3 && $3 <= 105 {count[10]++ }\
  105 < $3 {count[11]++}\
  $3 == "" {count["none"]++}

  END{ 
  max_val=count[0]
  if(implicit_max_val == 1) {\
    for (i in count) {\
      if(count[i] > max_val)
      {
        max_val = count[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    cnt_idx=1
    printf("0-5   :"); while (idx < int((hist_width * count[0]/max_val))) {printf "#" ; idx++}; printf "\n" 
    while (cnt_idx < 11) {\
      if(cnt_idx != "None") {printf("%-2d-%-3d:", interval_begin, interval_end)
      while (idx < int(hist_width*count[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0}
      interval_begin+=10; interval_end+=10;
      cnt_idx++
    }\

  printf("> 105 :"); while (idx < int(hist_width* count[11]/max_val) ) {printf "#" ; idx++} printf "\n"  
  if(count["none"]!=0) { printf("None :", max_val); while (idx < int(hist_width* count["none"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  
  }\
  else {\
  printf("0-5   : %d\n6-15  : %d\n16-25 : %d\n26-35 : %d\n36-45 : %d\n46-55 : %d\n56-65 : %d\n66-75 : %d\n76-85 : %d\n86-95 : %d\n96-105: %d\n> 105 : %d\n",
    count[0] , count[1] , count[2] , count[3] , count[4], count[5] , count[6] , count[7]\
    , count[8] , count[9] , count[10], count[11] )
  if(count["none"] != 0) printf("None  : %d\n",count["none"])} }'   
}

daily() {
  awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
  -v normal_date="$normal_year_pattern" -v leap_date="$leap_year_pattern"\
  '$2 !~ normal_date && $2 !~ leap_date && $2 != "" {next;}  $2 != "" {days[$2] += 1} $2=="" {days["None"] += 1}\

  END{\
  if(implicit_max_val == 1) {\
    for (i in days) {\
      if(days[i] > max_val)
      {
        max_val = days[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in days) {\
      if(cnt_idx != "None") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*days[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(days["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* days["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (day in days) {\
  if(day != "None") printf("%s: %d\n", day, days[day])};\
  if( days["None"] != "") printf("%s: %d\n", "None", days["None"])}\
  }'
}

month_regex='([0-9][0-9][0-9][0-9](-)(0[1-9]|1[012]))'
monthly() {
   awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
   -v valid_month="$month_regex"\
   'substr($2,1,7) !~ valid_month && $2 != "" {next;} $2 != "" {months[substr($2,1,7)] += 1} $2=="" {months["None"] += 1}\

  END{\

  if(implicit_max_val == 1) {\
    for (i in months) {\
      if(months[i] > max_val)
      {
        max_val = months[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in months) {\
      if(cnt_idx != "None" && cnt_idx !="") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*months[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(months["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* months["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (month in months){\
  if(month != "None") printf("%s: %d\n", month, months[month])};\
  if( months["None"] != "") printf("%s: %d\n", "None", months["None"])}\
  }' 
}


yearly() {
   awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
   'substr($2,1,4) !~ /[0-9][0-9][0-9][0-9]/ && $2 !="" {next;} $2 != "" {years[substr($2,1,4)] += 1} $2=="" {years["None"] += 1}\
  END{\

  if(implicit_max_val == 1) {\
    for (i in years) {\
      if(years[i] > max_val)
      {
        max_val = years[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in years) {\
      if(cnt_idx != "None" && cnt_idx !="") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*years[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(years["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* years["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (year in years){\
  if(year != "None") printf("%s: %d\n", year, years[year])};\
  if( years["None"] != "") printf("%s: %d\n", "None", years["None"])}\
  }' 
}

countries() { #formatovanie podla najdlhsieho a vypisiat nejak None az na konci
   awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
   '$8 != "" {countries[$8] += 1} $8 =="" {countries["None"]+=1}\
  
  END{\

  if(implicit_max_val == 1) {\
    for (i in countries) {\
      if(countries[i] > max_val)
      {
        max_val = countries[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in countries) {\
      if(cnt_idx != "None" && cnt_idx !="") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*countries[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(countries["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* countries["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (country in countries) if(country != "None") printf("%s: %d\n", country, countries[country]);\
  if(countries["None"]!="") printf("%s: %d\n", "None", countries["None"])}\
  }' 
}

districts() { 
  awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
  '$6 != "" {districts[$6] += 1} $6 =="" {districts["None"] += 1}\
  
  END{\

  if(implicit_max_val == 1) {\
    for (i in districts) {\
      if(districts[i] > max_val)
      {
        max_val = districts[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in districts) {\
      if(cnt_idx != "None" && cnt_idx !="") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*districts[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(districts["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* districts["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (district in districts){\
  if(district != "None") printf("%s: %d\n", district, districts[district])};\
  if(districts["None"]!="") printf("%s: %d\n", "None", districts["None"])}
  }'
}

regions() { 
  awk -F, -v hist="$histogram" -v hist_width="$histogram_width" -v implicit_max_val="$max_value"\
  '$5 != "" {regions[$5] += 1} $5 =="" {regions["None"] += 1}\
  
  END{\

  if(implicit_max_val == 1) {\
    for (i in regions) {\
      if(regions[i] > max_val)
      {
        max_val = regions[i];\
      }
    }\
  }\
  else {\
    max_val=implicit_max_val
  }\

  if(hist == "true") {\
    for (cnt_idx in regions) {\
      if(cnt_idx != "None" && cnt_idx !="") {printf("%s: ", cnt_idx);\
      while (idx < int(hist_width*regions[cnt_idx]/max_val)) {printf "#" ; idx++}; printf "\n" ; idx=0;}\
    }\
    if(regions["None"]!="") { printf("None: ", max_val); while (idx < int(hist_width* regions["None"] /max_val) ) {printf "#" ; idx++} printf "\n"  }
  }  

  else{\
  for (region in regions){\
  if(region != "None") printf("%s: %d\n", region, regions[region])};\
  printf("%s: %d\n", "None", regions["None"])}
  }'
}

sort_none_down(){
  sorted_with_none_top=$(tee >(awk -F='\n' '$0 !~ /None:*/ {print $0}' | sort -d) >/dev/null >(awk -F='\n' '$0 ~ /None:*/ ') )
  echo "$sorted_with_none_top" | awk -F='\n' -v none="" '$0 ~ /None:*/ {none=$0} $0 !~ /None:*/ {print $0} END{ if(none!="") print none}' 
}

sort_stdin() {
  sorted_in=$(sort -d)
  echo "$sorted_in"
  echo "$inv_data"
  if [[ -n "$inv_data" ]]
  then
    echo "not Empty"  
  else
    echo "empty"
  fi
}

input_type="stdin"
index=0
csv_idx=0
bz_idx=0
gz_idx=0
while (( $index != $#+1 ))
do
  eval file=\$$index
  if [[ $file =~ ^.*\.csv$ ]] 
  then input_type="csv" ; csv_files[$csv_idx]="$file" ; ((csv_idx++))
  elif [[ $file =~ ^.*\.bz2$ ]]
  then input_type="bz2" ; bz2_files[$bz_idx]="$file" ; ((bz_idx++))
  elif [[ $file =~ ^.*\.gz$ ]]
  then input_type="gz" ; gz_files[$gz_idx]="$file" ;((gz_idx++))
  fi 
  ((index++))
done 

case "$command" in 
    infected) merge | infected ;;
    merge) echo "$header"; merge | sort -d ;;
    gender) merge | gender ;;
    age) merge | age ;;
    daily) merge | daily | sort_none_down ;;
    monthly) merge | monthly | sort_none_down ;;
    yearly) merge | yearly | sort_none_down ;;
    countries) merge | countries | sort_none_down ;;
    districts) merge | districts | sort_none_down ;;
    regions) merge | regions | sort_none_down ;;
    "") echo "$header"; merge |  sed '/^$/d' ;;
esac

if [[ "$input_type" != "stdin" ]];then
  check_valid_data 1>&2
fi

exit 0;
